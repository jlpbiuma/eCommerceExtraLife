// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
  directUrl = env("SUPABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("roles")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  phone        String?
  address      String?
  isActive     Boolean   @default(true) @map("is_active")
  role         Role      @relation(fields: [roleId], references: [id])
  roleId       String    @map("role_id") @db.Uuid
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  @@map("users")
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  @@map("categories")
}

model Product {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  price        Decimal      @db.Decimal(10, 2)
  category     Category     @relation(fields: [categoryId], references: [id])
  categoryId   String       @map("category_id") @db.Uuid
  minPlayers   Int?        @map("min_players")
  maxPlayers   Int?        @map("max_players")
  playTimeMin  Int?        @map("play_time_min")
  playTimeMax  Int?        @map("play_time_max")
  ageRating    Int?        @map("age_rating")
  weight       Decimal?     @db.Decimal(10, 2)
  dimensions   String?
  publisher    String?
  isActive     Boolean      @default(true) @map("is_active")
  inventory    Inventory?
  orderItems   OrderItem[]
  reviews      Review[]
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime     @default(now()) @map("updated_at") @db.Timestamptz

  @@map("products")
}

model Inventory {
  id                String   @id @default(uuid()) @db.Uuid
  product           Product  @relation(fields: [productId], references: [id])
  productId         String   @unique @map("product_id") @db.Uuid
  quantity          Int      @default(0)
  lowStockThreshold Int      @default(5) @map("low_stock_threshold")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("inventory")
}

model Order {
  id              String      @id @default(uuid()) @db.Uuid
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @map("user_id") @db.Uuid
  status          String
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  shippingAddress String      @map("shipping_address")
  shippingMethod  String?     @map("shipping_method")
  trackingNumber  String?     @map("tracking_number")
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime    @default(now()) @map("updated_at") @db.Timestamptz

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id") @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id") @db.Uuid
  quantity  Int
  unitPrice Decimal  @map("unit_price") @db.Decimal(10, 2)
  subtotal  Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@unique([productId, userId])
  @@map("reviews")
} 